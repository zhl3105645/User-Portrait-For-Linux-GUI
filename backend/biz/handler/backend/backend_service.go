// Code generated by hertz generator.

package backend

import (
	"backend/biz/microtype"
	"backend/biz/model/backend"
	"backend/biz/mw"
	"backend/biz/usecase/account"
	"backend/biz/usecase/applist"
	"backend/biz/usecase/register"
	"backend/cmd/dal/model"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req backend.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(backend.RegisterResp)

	rg := register.NewRegister(req)
	if err := rg.Load(ctx); err != nil {
		mErr := microtype.Unwrap(err)
		resp.StatusCode = mErr.Code
		resp.StatusMsg = mErr.Msg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp = rg.GetResp()

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	//var err error
	//var req backend.LoginReq
	//err = c.BindAndValidate(&req)
	//if err != nil {
	//	c.String(consts.StatusBadRequest, err.Error())
	//	return
	//}
	//
	//resp := new(backend.LoginResp)
	//
	//lg := login.NewLogin(req)
	//if err := lg.Load(ctx); err != nil {
	//	mErr := microtype.Unwrap(err)
	//	resp.StatusCode = mErr.Code
	//	resp.StatusMsg = mErr.Msg
	//	c.JSON(consts.StatusOK, resp)
	//	return
	//}
	//
	//resp = lg.GetResp()
	//
	//c.JSON(consts.StatusOK, resp)
}

// AppList .
// @router /applist [GET]
func AppList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req backend.AppListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(backend.AppListResp)

	al := applist.NewAppList()
	if err := al.Load(ctx); err != nil {
		mErr := microtype.Unwrap(err)
		resp.StatusCode = mErr.Code
		resp.StatusMsg = mErr.Msg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp = al.GetResp()

	c.JSON(consts.StatusOK, resp)
}

// Account .
// @router /api/account [GET]
func Account(ctx context.Context, c *app.RequestContext) {
	var err error
	var req backend.AccountReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(backend.AccountResp)

	ac, _ := c.Get(mw.IdentityKey)
	al := account.NewAccount(ac.(*model.Account).AccountID)
	if err := al.Load(ctx); err != nil {
		mErr := microtype.Unwrap(err)
		resp.StatusCode = mErr.Code
		resp.StatusMsg = mErr.Msg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp = al.GetResp()

	c.JSON(consts.StatusOK, resp)
}
