// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newLabelDatum(db *gorm.DB, opts ...gen.DOOption) labelDatum {
	_labelDatum := labelDatum{}

	_labelDatum.labelDatumDo.UseDB(db, opts...)
	_labelDatum.labelDatumDo.UseModel(&model.LabelDatum{})

	tableName := _labelDatum.labelDatumDo.TableName()
	_labelDatum.ALL = field.NewAsterisk(tableName)
	_labelDatum.LabelDataID = field.NewInt64(tableName, "label_data_id")
	_labelDatum.Data = field.NewString(tableName, "data")
	_labelDatum.LabelID = field.NewInt64(tableName, "label_id")
	_labelDatum.UserID = field.NewInt64(tableName, "user_id")

	_labelDatum.fillFieldMap()

	return _labelDatum
}

type labelDatum struct {
	labelDatumDo labelDatumDo

	ALL         field.Asterisk
	LabelDataID field.Int64  // 标签数据ID
	Data        field.String // 标签数据
	LabelID     field.Int64  // 标签ID
	UserID      field.Int64  // 用户ID

	fieldMap map[string]field.Expr
}

func (l labelDatum) Table(newTableName string) *labelDatum {
	l.labelDatumDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l labelDatum) As(alias string) *labelDatum {
	l.labelDatumDo.DO = *(l.labelDatumDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *labelDatum) updateTableName(table string) *labelDatum {
	l.ALL = field.NewAsterisk(table)
	l.LabelDataID = field.NewInt64(table, "label_data_id")
	l.Data = field.NewString(table, "data")
	l.LabelID = field.NewInt64(table, "label_id")
	l.UserID = field.NewInt64(table, "user_id")

	l.fillFieldMap()

	return l
}

func (l *labelDatum) WithContext(ctx context.Context) ILabelDatumDo {
	return l.labelDatumDo.WithContext(ctx)
}

func (l labelDatum) TableName() string { return l.labelDatumDo.TableName() }

func (l labelDatum) Alias() string { return l.labelDatumDo.Alias() }

func (l *labelDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *labelDatum) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["label_data_id"] = l.LabelDataID
	l.fieldMap["data"] = l.Data
	l.fieldMap["label_id"] = l.LabelID
	l.fieldMap["user_id"] = l.UserID
}

func (l labelDatum) clone(db *gorm.DB) labelDatum {
	l.labelDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l labelDatum) replaceDB(db *gorm.DB) labelDatum {
	l.labelDatumDo.ReplaceDB(db)
	return l
}

type labelDatumDo struct{ gen.DO }

type ILabelDatumDo interface {
	gen.SubQuery
	Debug() ILabelDatumDo
	WithContext(ctx context.Context) ILabelDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILabelDatumDo
	WriteDB() ILabelDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILabelDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILabelDatumDo
	Not(conds ...gen.Condition) ILabelDatumDo
	Or(conds ...gen.Condition) ILabelDatumDo
	Select(conds ...field.Expr) ILabelDatumDo
	Where(conds ...gen.Condition) ILabelDatumDo
	Order(conds ...field.Expr) ILabelDatumDo
	Distinct(cols ...field.Expr) ILabelDatumDo
	Omit(cols ...field.Expr) ILabelDatumDo
	Join(table schema.Tabler, on ...field.Expr) ILabelDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILabelDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILabelDatumDo
	Group(cols ...field.Expr) ILabelDatumDo
	Having(conds ...gen.Condition) ILabelDatumDo
	Limit(limit int) ILabelDatumDo
	Offset(offset int) ILabelDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILabelDatumDo
	Unscoped() ILabelDatumDo
	Create(values ...*model.LabelDatum) error
	CreateInBatches(values []*model.LabelDatum, batchSize int) error
	Save(values ...*model.LabelDatum) error
	First() (*model.LabelDatum, error)
	Take() (*model.LabelDatum, error)
	Last() (*model.LabelDatum, error)
	Find() ([]*model.LabelDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LabelDatum, err error)
	FindInBatches(result *[]*model.LabelDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LabelDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILabelDatumDo
	Assign(attrs ...field.AssignExpr) ILabelDatumDo
	Joins(fields ...field.RelationField) ILabelDatumDo
	Preload(fields ...field.RelationField) ILabelDatumDo
	FirstOrInit() (*model.LabelDatum, error)
	FirstOrCreate() (*model.LabelDatum, error)
	FindByPage(offset int, limit int) (result []*model.LabelDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILabelDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l labelDatumDo) Debug() ILabelDatumDo {
	return l.withDO(l.DO.Debug())
}

func (l labelDatumDo) WithContext(ctx context.Context) ILabelDatumDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l labelDatumDo) ReadDB() ILabelDatumDo {
	return l.Clauses(dbresolver.Read)
}

func (l labelDatumDo) WriteDB() ILabelDatumDo {
	return l.Clauses(dbresolver.Write)
}

func (l labelDatumDo) Session(config *gorm.Session) ILabelDatumDo {
	return l.withDO(l.DO.Session(config))
}

func (l labelDatumDo) Clauses(conds ...clause.Expression) ILabelDatumDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l labelDatumDo) Returning(value interface{}, columns ...string) ILabelDatumDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l labelDatumDo) Not(conds ...gen.Condition) ILabelDatumDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l labelDatumDo) Or(conds ...gen.Condition) ILabelDatumDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l labelDatumDo) Select(conds ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l labelDatumDo) Where(conds ...gen.Condition) ILabelDatumDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l labelDatumDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILabelDatumDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l labelDatumDo) Order(conds ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l labelDatumDo) Distinct(cols ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l labelDatumDo) Omit(cols ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l labelDatumDo) Join(table schema.Tabler, on ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l labelDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l labelDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l labelDatumDo) Group(cols ...field.Expr) ILabelDatumDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l labelDatumDo) Having(conds ...gen.Condition) ILabelDatumDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l labelDatumDo) Limit(limit int) ILabelDatumDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l labelDatumDo) Offset(offset int) ILabelDatumDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l labelDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILabelDatumDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l labelDatumDo) Unscoped() ILabelDatumDo {
	return l.withDO(l.DO.Unscoped())
}

func (l labelDatumDo) Create(values ...*model.LabelDatum) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l labelDatumDo) CreateInBatches(values []*model.LabelDatum, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l labelDatumDo) Save(values ...*model.LabelDatum) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l labelDatumDo) First() (*model.LabelDatum, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LabelDatum), nil
	}
}

func (l labelDatumDo) Take() (*model.LabelDatum, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LabelDatum), nil
	}
}

func (l labelDatumDo) Last() (*model.LabelDatum, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LabelDatum), nil
	}
}

func (l labelDatumDo) Find() ([]*model.LabelDatum, error) {
	result, err := l.DO.Find()
	return result.([]*model.LabelDatum), err
}

func (l labelDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LabelDatum, err error) {
	buf := make([]*model.LabelDatum, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l labelDatumDo) FindInBatches(result *[]*model.LabelDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l labelDatumDo) Attrs(attrs ...field.AssignExpr) ILabelDatumDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l labelDatumDo) Assign(attrs ...field.AssignExpr) ILabelDatumDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l labelDatumDo) Joins(fields ...field.RelationField) ILabelDatumDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l labelDatumDo) Preload(fields ...field.RelationField) ILabelDatumDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l labelDatumDo) FirstOrInit() (*model.LabelDatum, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LabelDatum), nil
	}
}

func (l labelDatumDo) FirstOrCreate() (*model.LabelDatum, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LabelDatum), nil
	}
}

func (l labelDatumDo) FindByPage(offset int, limit int) (result []*model.LabelDatum, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l labelDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l labelDatumDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l labelDatumDo) Delete(models ...*model.LabelDatum) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *labelDatumDo) withDO(do gen.Dao) *labelDatumDo {
	l.DO = *do.(*gen.DO)
	return l
}
