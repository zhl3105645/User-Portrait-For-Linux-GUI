// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newCrowdRelation(db *gorm.DB, opts ...gen.DOOption) crowdRelation {
	_crowdRelation := crowdRelation{}

	_crowdRelation.crowdRelationDo.UseDB(db, opts...)
	_crowdRelation.crowdRelationDo.UseModel(&model.CrowdRelation{})

	tableName := _crowdRelation.crowdRelationDo.TableName()
	_crowdRelation.ALL = field.NewAsterisk(tableName)
	_crowdRelation.CrowdRelationID = field.NewInt64(tableName, "crowd_relation_id")
	_crowdRelation.UserID = field.NewInt64(tableName, "user_id")
	_crowdRelation.CrowdID = field.NewInt64(tableName, "crowd_id")

	_crowdRelation.fillFieldMap()

	return _crowdRelation
}

type crowdRelation struct {
	crowdRelationDo crowdRelationDo

	ALL             field.Asterisk
	CrowdRelationID field.Int64 // 人群关系ID
	UserID          field.Int64 // 用户ID
	CrowdID         field.Int64 // 人群ID

	fieldMap map[string]field.Expr
}

func (c crowdRelation) Table(newTableName string) *crowdRelation {
	c.crowdRelationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crowdRelation) As(alias string) *crowdRelation {
	c.crowdRelationDo.DO = *(c.crowdRelationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crowdRelation) updateTableName(table string) *crowdRelation {
	c.ALL = field.NewAsterisk(table)
	c.CrowdRelationID = field.NewInt64(table, "crowd_relation_id")
	c.UserID = field.NewInt64(table, "user_id")
	c.CrowdID = field.NewInt64(table, "crowd_id")

	c.fillFieldMap()

	return c
}

func (c *crowdRelation) WithContext(ctx context.Context) ICrowdRelationDo {
	return c.crowdRelationDo.WithContext(ctx)
}

func (c crowdRelation) TableName() string { return c.crowdRelationDo.TableName() }

func (c crowdRelation) Alias() string { return c.crowdRelationDo.Alias() }

func (c *crowdRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crowdRelation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["crowd_relation_id"] = c.CrowdRelationID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["crowd_id"] = c.CrowdID
}

func (c crowdRelation) clone(db *gorm.DB) crowdRelation {
	c.crowdRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crowdRelation) replaceDB(db *gorm.DB) crowdRelation {
	c.crowdRelationDo.ReplaceDB(db)
	return c
}

type crowdRelationDo struct{ gen.DO }

type ICrowdRelationDo interface {
	gen.SubQuery
	Debug() ICrowdRelationDo
	WithContext(ctx context.Context) ICrowdRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrowdRelationDo
	WriteDB() ICrowdRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrowdRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrowdRelationDo
	Not(conds ...gen.Condition) ICrowdRelationDo
	Or(conds ...gen.Condition) ICrowdRelationDo
	Select(conds ...field.Expr) ICrowdRelationDo
	Where(conds ...gen.Condition) ICrowdRelationDo
	Order(conds ...field.Expr) ICrowdRelationDo
	Distinct(cols ...field.Expr) ICrowdRelationDo
	Omit(cols ...field.Expr) ICrowdRelationDo
	Join(table schema.Tabler, on ...field.Expr) ICrowdRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrowdRelationDo
	Group(cols ...field.Expr) ICrowdRelationDo
	Having(conds ...gen.Condition) ICrowdRelationDo
	Limit(limit int) ICrowdRelationDo
	Offset(offset int) ICrowdRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdRelationDo
	Unscoped() ICrowdRelationDo
	Create(values ...*model.CrowdRelation) error
	CreateInBatches(values []*model.CrowdRelation, batchSize int) error
	Save(values ...*model.CrowdRelation) error
	First() (*model.CrowdRelation, error)
	Take() (*model.CrowdRelation, error)
	Last() (*model.CrowdRelation, error)
	Find() ([]*model.CrowdRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdRelation, err error)
	FindInBatches(result *[]*model.CrowdRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrowdRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrowdRelationDo
	Assign(attrs ...field.AssignExpr) ICrowdRelationDo
	Joins(fields ...field.RelationField) ICrowdRelationDo
	Preload(fields ...field.RelationField) ICrowdRelationDo
	FirstOrInit() (*model.CrowdRelation, error)
	FirstOrCreate() (*model.CrowdRelation, error)
	FindByPage(offset int, limit int) (result []*model.CrowdRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrowdRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crowdRelationDo) Debug() ICrowdRelationDo {
	return c.withDO(c.DO.Debug())
}

func (c crowdRelationDo) WithContext(ctx context.Context) ICrowdRelationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crowdRelationDo) ReadDB() ICrowdRelationDo {
	return c.Clauses(dbresolver.Read)
}

func (c crowdRelationDo) WriteDB() ICrowdRelationDo {
	return c.Clauses(dbresolver.Write)
}

func (c crowdRelationDo) Session(config *gorm.Session) ICrowdRelationDo {
	return c.withDO(c.DO.Session(config))
}

func (c crowdRelationDo) Clauses(conds ...clause.Expression) ICrowdRelationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crowdRelationDo) Returning(value interface{}, columns ...string) ICrowdRelationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crowdRelationDo) Not(conds ...gen.Condition) ICrowdRelationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crowdRelationDo) Or(conds ...gen.Condition) ICrowdRelationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crowdRelationDo) Select(conds ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crowdRelationDo) Where(conds ...gen.Condition) ICrowdRelationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crowdRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICrowdRelationDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c crowdRelationDo) Order(conds ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crowdRelationDo) Distinct(cols ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crowdRelationDo) Omit(cols ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crowdRelationDo) Join(table schema.Tabler, on ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crowdRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crowdRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crowdRelationDo) Group(cols ...field.Expr) ICrowdRelationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crowdRelationDo) Having(conds ...gen.Condition) ICrowdRelationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crowdRelationDo) Limit(limit int) ICrowdRelationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crowdRelationDo) Offset(offset int) ICrowdRelationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crowdRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdRelationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crowdRelationDo) Unscoped() ICrowdRelationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crowdRelationDo) Create(values ...*model.CrowdRelation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crowdRelationDo) CreateInBatches(values []*model.CrowdRelation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crowdRelationDo) Save(values ...*model.CrowdRelation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crowdRelationDo) First() (*model.CrowdRelation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRelation), nil
	}
}

func (c crowdRelationDo) Take() (*model.CrowdRelation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRelation), nil
	}
}

func (c crowdRelationDo) Last() (*model.CrowdRelation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRelation), nil
	}
}

func (c crowdRelationDo) Find() ([]*model.CrowdRelation, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrowdRelation), err
}

func (c crowdRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdRelation, err error) {
	buf := make([]*model.CrowdRelation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crowdRelationDo) FindInBatches(result *[]*model.CrowdRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crowdRelationDo) Attrs(attrs ...field.AssignExpr) ICrowdRelationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crowdRelationDo) Assign(attrs ...field.AssignExpr) ICrowdRelationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crowdRelationDo) Joins(fields ...field.RelationField) ICrowdRelationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crowdRelationDo) Preload(fields ...field.RelationField) ICrowdRelationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crowdRelationDo) FirstOrInit() (*model.CrowdRelation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRelation), nil
	}
}

func (c crowdRelationDo) FirstOrCreate() (*model.CrowdRelation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRelation), nil
	}
}

func (c crowdRelationDo) FindByPage(offset int, limit int) (result []*model.CrowdRelation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crowdRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crowdRelationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crowdRelationDo) Delete(models ...*model.CrowdRelation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crowdRelationDo) withDO(do gen.Dao) *crowdRelationDo {
	c.DO = *do.(*gen.DO)
	return c
}
