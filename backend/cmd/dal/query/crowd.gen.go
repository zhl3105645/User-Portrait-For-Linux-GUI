// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newCrowd(db *gorm.DB, opts ...gen.DOOption) crowd {
	_crowd := crowd{}

	_crowd.crowdDo.UseDB(db, opts...)
	_crowd.crowdDo.UseModel(&model.Crowd{})

	tableName := _crowd.crowdDo.TableName()
	_crowd.ALL = field.NewAsterisk(tableName)
	_crowd.CrowdID = field.NewInt64(tableName, "crowd_id")
	_crowd.CrowdDesc = field.NewString(tableName, "crowd_desc")
	_crowd.AppID = field.NewInt64(tableName, "app_id")
	_crowd.CrowdName = field.NewString(tableName, "crowd_name")
	_crowd.CrowdDivideRule = field.NewString(tableName, "crowd_divide_rule")
	_crowd.BehaviorDurationMap = field.NewString(tableName, "behavior_duration_map")

	_crowd.fillFieldMap()

	return _crowd
}

type crowd struct {
	crowdDo crowdDo

	ALL                 field.Asterisk
	CrowdID             field.Int64  // 人群ID
	CrowdDesc           field.String // 人群描述
	AppID               field.Int64  // 应用ID
	CrowdName           field.String // 人群名
	CrowdDivideRule     field.String // 人群划分规则
	BehaviorDurationMap field.String // 行为时长map

	fieldMap map[string]field.Expr
}

func (c crowd) Table(newTableName string) *crowd {
	c.crowdDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crowd) As(alias string) *crowd {
	c.crowdDo.DO = *(c.crowdDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crowd) updateTableName(table string) *crowd {
	c.ALL = field.NewAsterisk(table)
	c.CrowdID = field.NewInt64(table, "crowd_id")
	c.CrowdDesc = field.NewString(table, "crowd_desc")
	c.AppID = field.NewInt64(table, "app_id")
	c.CrowdName = field.NewString(table, "crowd_name")
	c.CrowdDivideRule = field.NewString(table, "crowd_divide_rule")
	c.BehaviorDurationMap = field.NewString(table, "behavior_duration_map")

	c.fillFieldMap()

	return c
}

func (c *crowd) WithContext(ctx context.Context) ICrowdDo { return c.crowdDo.WithContext(ctx) }

func (c crowd) TableName() string { return c.crowdDo.TableName() }

func (c crowd) Alias() string { return c.crowdDo.Alias() }

func (c *crowd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crowd) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["crowd_id"] = c.CrowdID
	c.fieldMap["crowd_desc"] = c.CrowdDesc
	c.fieldMap["app_id"] = c.AppID
	c.fieldMap["crowd_name"] = c.CrowdName
	c.fieldMap["crowd_divide_rule"] = c.CrowdDivideRule
	c.fieldMap["behavior_duration_map"] = c.BehaviorDurationMap
}

func (c crowd) clone(db *gorm.DB) crowd {
	c.crowdDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crowd) replaceDB(db *gorm.DB) crowd {
	c.crowdDo.ReplaceDB(db)
	return c
}

type crowdDo struct{ gen.DO }

type ICrowdDo interface {
	gen.SubQuery
	Debug() ICrowdDo
	WithContext(ctx context.Context) ICrowdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrowdDo
	WriteDB() ICrowdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrowdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrowdDo
	Not(conds ...gen.Condition) ICrowdDo
	Or(conds ...gen.Condition) ICrowdDo
	Select(conds ...field.Expr) ICrowdDo
	Where(conds ...gen.Condition) ICrowdDo
	Order(conds ...field.Expr) ICrowdDo
	Distinct(cols ...field.Expr) ICrowdDo
	Omit(cols ...field.Expr) ICrowdDo
	Join(table schema.Tabler, on ...field.Expr) ICrowdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrowdDo
	Group(cols ...field.Expr) ICrowdDo
	Having(conds ...gen.Condition) ICrowdDo
	Limit(limit int) ICrowdDo
	Offset(offset int) ICrowdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdDo
	Unscoped() ICrowdDo
	Create(values ...*model.Crowd) error
	CreateInBatches(values []*model.Crowd, batchSize int) error
	Save(values ...*model.Crowd) error
	First() (*model.Crowd, error)
	Take() (*model.Crowd, error)
	Last() (*model.Crowd, error)
	Find() ([]*model.Crowd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Crowd, err error)
	FindInBatches(result *[]*model.Crowd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Crowd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrowdDo
	Assign(attrs ...field.AssignExpr) ICrowdDo
	Joins(fields ...field.RelationField) ICrowdDo
	Preload(fields ...field.RelationField) ICrowdDo
	FirstOrInit() (*model.Crowd, error)
	FirstOrCreate() (*model.Crowd, error)
	FindByPage(offset int, limit int) (result []*model.Crowd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrowdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crowdDo) Debug() ICrowdDo {
	return c.withDO(c.DO.Debug())
}

func (c crowdDo) WithContext(ctx context.Context) ICrowdDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crowdDo) ReadDB() ICrowdDo {
	return c.Clauses(dbresolver.Read)
}

func (c crowdDo) WriteDB() ICrowdDo {
	return c.Clauses(dbresolver.Write)
}

func (c crowdDo) Session(config *gorm.Session) ICrowdDo {
	return c.withDO(c.DO.Session(config))
}

func (c crowdDo) Clauses(conds ...clause.Expression) ICrowdDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crowdDo) Returning(value interface{}, columns ...string) ICrowdDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crowdDo) Not(conds ...gen.Condition) ICrowdDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crowdDo) Or(conds ...gen.Condition) ICrowdDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crowdDo) Select(conds ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crowdDo) Where(conds ...gen.Condition) ICrowdDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crowdDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICrowdDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c crowdDo) Order(conds ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crowdDo) Distinct(cols ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crowdDo) Omit(cols ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crowdDo) Join(table schema.Tabler, on ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crowdDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crowdDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crowdDo) Group(cols ...field.Expr) ICrowdDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crowdDo) Having(conds ...gen.Condition) ICrowdDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crowdDo) Limit(limit int) ICrowdDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crowdDo) Offset(offset int) ICrowdDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crowdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crowdDo) Unscoped() ICrowdDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crowdDo) Create(values ...*model.Crowd) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crowdDo) CreateInBatches(values []*model.Crowd, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crowdDo) Save(values ...*model.Crowd) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crowdDo) First() (*model.Crowd, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Crowd), nil
	}
}

func (c crowdDo) Take() (*model.Crowd, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Crowd), nil
	}
}

func (c crowdDo) Last() (*model.Crowd, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Crowd), nil
	}
}

func (c crowdDo) Find() ([]*model.Crowd, error) {
	result, err := c.DO.Find()
	return result.([]*model.Crowd), err
}

func (c crowdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Crowd, err error) {
	buf := make([]*model.Crowd, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crowdDo) FindInBatches(result *[]*model.Crowd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crowdDo) Attrs(attrs ...field.AssignExpr) ICrowdDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crowdDo) Assign(attrs ...field.AssignExpr) ICrowdDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crowdDo) Joins(fields ...field.RelationField) ICrowdDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crowdDo) Preload(fields ...field.RelationField) ICrowdDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crowdDo) FirstOrInit() (*model.Crowd, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Crowd), nil
	}
}

func (c crowdDo) FirstOrCreate() (*model.Crowd, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Crowd), nil
	}
}

func (c crowdDo) FindByPage(offset int, limit int) (result []*model.Crowd, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crowdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crowdDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crowdDo) Delete(models ...*model.Crowd) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crowdDo) withDO(do gen.Dao) *crowdDo {
	c.DO = *do.(*gen.DO)
	return c
}
