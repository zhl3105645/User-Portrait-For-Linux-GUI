// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Account     *account
	App         *app
	Component   *component
	DataModel   *dataModel
	DataSource  *dataSource
	Label       *label
	LabelDatum  *labelDatum
	ModelDatum  *modelDatum
	Record      *record
	Rule        *rule
	RuleElement *ruleElement
	User        *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	App = &Q.App
	Component = &Q.Component
	DataModel = &Q.DataModel
	DataSource = &Q.DataSource
	Label = &Q.Label
	LabelDatum = &Q.LabelDatum
	ModelDatum = &Q.ModelDatum
	Record = &Q.Record
	Rule = &Q.Rule
	RuleElement = &Q.RuleElement
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Account:     newAccount(db, opts...),
		App:         newApp(db, opts...),
		Component:   newComponent(db, opts...),
		DataModel:   newDataModel(db, opts...),
		DataSource:  newDataSource(db, opts...),
		Label:       newLabel(db, opts...),
		LabelDatum:  newLabelDatum(db, opts...),
		ModelDatum:  newModelDatum(db, opts...),
		Record:      newRecord(db, opts...),
		Rule:        newRule(db, opts...),
		RuleElement: newRuleElement(db, opts...),
		User:        newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account     account
	App         app
	Component   component
	DataModel   dataModel
	DataSource  dataSource
	Label       label
	LabelDatum  labelDatum
	ModelDatum  modelDatum
	Record      record
	Rule        rule
	RuleElement ruleElement
	User        user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Account:     q.Account.clone(db),
		App:         q.App.clone(db),
		Component:   q.Component.clone(db),
		DataModel:   q.DataModel.clone(db),
		DataSource:  q.DataSource.clone(db),
		Label:       q.Label.clone(db),
		LabelDatum:  q.LabelDatum.clone(db),
		ModelDatum:  q.ModelDatum.clone(db),
		Record:      q.Record.clone(db),
		Rule:        q.Rule.clone(db),
		RuleElement: q.RuleElement.clone(db),
		User:        q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Account:     q.Account.replaceDB(db),
		App:         q.App.replaceDB(db),
		Component:   q.Component.replaceDB(db),
		DataModel:   q.DataModel.replaceDB(db),
		DataSource:  q.DataSource.replaceDB(db),
		Label:       q.Label.replaceDB(db),
		LabelDatum:  q.LabelDatum.replaceDB(db),
		ModelDatum:  q.ModelDatum.replaceDB(db),
		Record:      q.Record.replaceDB(db),
		Rule:        q.Rule.replaceDB(db),
		RuleElement: q.RuleElement.replaceDB(db),
		User:        q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Account     IAccountDo
	App         IAppDo
	Component   IComponentDo
	DataModel   IDataModelDo
	DataSource  IDataSourceDo
	Label       ILabelDo
	LabelDatum  ILabelDatumDo
	ModelDatum  IModelDatumDo
	Record      IRecordDo
	Rule        IRuleDo
	RuleElement IRuleElementDo
	User        IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:     q.Account.WithContext(ctx),
		App:         q.App.WithContext(ctx),
		Component:   q.Component.WithContext(ctx),
		DataModel:   q.DataModel.WithContext(ctx),
		DataSource:  q.DataSource.WithContext(ctx),
		Label:       q.Label.WithContext(ctx),
		LabelDatum:  q.LabelDatum.WithContext(ctx),
		ModelDatum:  q.ModelDatum.WithContext(ctx),
		Record:      q.Record.WithContext(ctx),
		Rule:        q.Rule.WithContext(ctx),
		RuleElement: q.RuleElement.WithContext(ctx),
		User:        q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
