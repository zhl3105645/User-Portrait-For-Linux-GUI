// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newSeqMiningTask(db *gorm.DB, opts ...gen.DOOption) seqMiningTask {
	_seqMiningTask := seqMiningTask{}

	_seqMiningTask.seqMiningTaskDo.UseDB(db, opts...)
	_seqMiningTask.seqMiningTaskDo.UseModel(&model.SeqMiningTask{})

	tableName := _seqMiningTask.seqMiningTaskDo.TableName()
	_seqMiningTask.ALL = field.NewAsterisk(tableName)
	_seqMiningTask.TaskID = field.NewInt64(tableName, "task_id")
	_seqMiningTask.TaskName = field.NewString(tableName, "task_name")
	_seqMiningTask.CreateTime = field.NewTime(tableName, "create_time")
	_seqMiningTask.Status = field.NewInt64(tableName, "status")
	_seqMiningTask.Percent = field.NewInt64(tableName, "percent")
	_seqMiningTask.Event2number = field.NewString(tableName, "event2number")
	_seqMiningTask.Result = field.NewString(tableName, "result")
	_seqMiningTask.AppID = field.NewInt64(tableName, "app_id")

	_seqMiningTask.fillFieldMap()

	return _seqMiningTask
}

type seqMiningTask struct {
	seqMiningTaskDo seqMiningTaskDo

	ALL          field.Asterisk
	TaskID       field.Int64  // 挖掘任务ID
	TaskName     field.String // 任务名
	CreateTime   field.Time   // 任务创建时间
	Status       field.Int64  // 挖掘状态
	Percent      field.Int64  // 最小支持度
	Event2number field.String // 事件数据映射编号
	Result       field.String // 挖掘结果
	AppID        field.Int64  // 应用ID

	fieldMap map[string]field.Expr
}

func (s seqMiningTask) Table(newTableName string) *seqMiningTask {
	s.seqMiningTaskDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seqMiningTask) As(alias string) *seqMiningTask {
	s.seqMiningTaskDo.DO = *(s.seqMiningTaskDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seqMiningTask) updateTableName(table string) *seqMiningTask {
	s.ALL = field.NewAsterisk(table)
	s.TaskID = field.NewInt64(table, "task_id")
	s.TaskName = field.NewString(table, "task_name")
	s.CreateTime = field.NewTime(table, "create_time")
	s.Status = field.NewInt64(table, "status")
	s.Percent = field.NewInt64(table, "percent")
	s.Event2number = field.NewString(table, "event2number")
	s.Result = field.NewString(table, "result")
	s.AppID = field.NewInt64(table, "app_id")

	s.fillFieldMap()

	return s
}

func (s *seqMiningTask) WithContext(ctx context.Context) ISeqMiningTaskDo {
	return s.seqMiningTaskDo.WithContext(ctx)
}

func (s seqMiningTask) TableName() string { return s.seqMiningTaskDo.TableName() }

func (s seqMiningTask) Alias() string { return s.seqMiningTaskDo.Alias() }

func (s *seqMiningTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seqMiningTask) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["task_id"] = s.TaskID
	s.fieldMap["task_name"] = s.TaskName
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["status"] = s.Status
	s.fieldMap["percent"] = s.Percent
	s.fieldMap["event2number"] = s.Event2number
	s.fieldMap["result"] = s.Result
	s.fieldMap["app_id"] = s.AppID
}

func (s seqMiningTask) clone(db *gorm.DB) seqMiningTask {
	s.seqMiningTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seqMiningTask) replaceDB(db *gorm.DB) seqMiningTask {
	s.seqMiningTaskDo.ReplaceDB(db)
	return s
}

type seqMiningTaskDo struct{ gen.DO }

type ISeqMiningTaskDo interface {
	gen.SubQuery
	Debug() ISeqMiningTaskDo
	WithContext(ctx context.Context) ISeqMiningTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeqMiningTaskDo
	WriteDB() ISeqMiningTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeqMiningTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeqMiningTaskDo
	Not(conds ...gen.Condition) ISeqMiningTaskDo
	Or(conds ...gen.Condition) ISeqMiningTaskDo
	Select(conds ...field.Expr) ISeqMiningTaskDo
	Where(conds ...gen.Condition) ISeqMiningTaskDo
	Order(conds ...field.Expr) ISeqMiningTaskDo
	Distinct(cols ...field.Expr) ISeqMiningTaskDo
	Omit(cols ...field.Expr) ISeqMiningTaskDo
	Join(table schema.Tabler, on ...field.Expr) ISeqMiningTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeqMiningTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeqMiningTaskDo
	Group(cols ...field.Expr) ISeqMiningTaskDo
	Having(conds ...gen.Condition) ISeqMiningTaskDo
	Limit(limit int) ISeqMiningTaskDo
	Offset(offset int) ISeqMiningTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeqMiningTaskDo
	Unscoped() ISeqMiningTaskDo
	Create(values ...*model.SeqMiningTask) error
	CreateInBatches(values []*model.SeqMiningTask, batchSize int) error
	Save(values ...*model.SeqMiningTask) error
	First() (*model.SeqMiningTask, error)
	Take() (*model.SeqMiningTask, error)
	Last() (*model.SeqMiningTask, error)
	Find() ([]*model.SeqMiningTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeqMiningTask, err error)
	FindInBatches(result *[]*model.SeqMiningTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeqMiningTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeqMiningTaskDo
	Assign(attrs ...field.AssignExpr) ISeqMiningTaskDo
	Joins(fields ...field.RelationField) ISeqMiningTaskDo
	Preload(fields ...field.RelationField) ISeqMiningTaskDo
	FirstOrInit() (*model.SeqMiningTask, error)
	FirstOrCreate() (*model.SeqMiningTask, error)
	FindByPage(offset int, limit int) (result []*model.SeqMiningTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeqMiningTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seqMiningTaskDo) Debug() ISeqMiningTaskDo {
	return s.withDO(s.DO.Debug())
}

func (s seqMiningTaskDo) WithContext(ctx context.Context) ISeqMiningTaskDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seqMiningTaskDo) ReadDB() ISeqMiningTaskDo {
	return s.Clauses(dbresolver.Read)
}

func (s seqMiningTaskDo) WriteDB() ISeqMiningTaskDo {
	return s.Clauses(dbresolver.Write)
}

func (s seqMiningTaskDo) Session(config *gorm.Session) ISeqMiningTaskDo {
	return s.withDO(s.DO.Session(config))
}

func (s seqMiningTaskDo) Clauses(conds ...clause.Expression) ISeqMiningTaskDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seqMiningTaskDo) Returning(value interface{}, columns ...string) ISeqMiningTaskDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seqMiningTaskDo) Not(conds ...gen.Condition) ISeqMiningTaskDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seqMiningTaskDo) Or(conds ...gen.Condition) ISeqMiningTaskDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seqMiningTaskDo) Select(conds ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seqMiningTaskDo) Where(conds ...gen.Condition) ISeqMiningTaskDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seqMiningTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISeqMiningTaskDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s seqMiningTaskDo) Order(conds ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seqMiningTaskDo) Distinct(cols ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seqMiningTaskDo) Omit(cols ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seqMiningTaskDo) Join(table schema.Tabler, on ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seqMiningTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seqMiningTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seqMiningTaskDo) Group(cols ...field.Expr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seqMiningTaskDo) Having(conds ...gen.Condition) ISeqMiningTaskDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seqMiningTaskDo) Limit(limit int) ISeqMiningTaskDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seqMiningTaskDo) Offset(offset int) ISeqMiningTaskDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seqMiningTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeqMiningTaskDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seqMiningTaskDo) Unscoped() ISeqMiningTaskDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seqMiningTaskDo) Create(values ...*model.SeqMiningTask) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seqMiningTaskDo) CreateInBatches(values []*model.SeqMiningTask, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seqMiningTaskDo) Save(values ...*model.SeqMiningTask) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seqMiningTaskDo) First() (*model.SeqMiningTask, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeqMiningTask), nil
	}
}

func (s seqMiningTaskDo) Take() (*model.SeqMiningTask, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeqMiningTask), nil
	}
}

func (s seqMiningTaskDo) Last() (*model.SeqMiningTask, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeqMiningTask), nil
	}
}

func (s seqMiningTaskDo) Find() ([]*model.SeqMiningTask, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeqMiningTask), err
}

func (s seqMiningTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeqMiningTask, err error) {
	buf := make([]*model.SeqMiningTask, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seqMiningTaskDo) FindInBatches(result *[]*model.SeqMiningTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seqMiningTaskDo) Attrs(attrs ...field.AssignExpr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seqMiningTaskDo) Assign(attrs ...field.AssignExpr) ISeqMiningTaskDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seqMiningTaskDo) Joins(fields ...field.RelationField) ISeqMiningTaskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seqMiningTaskDo) Preload(fields ...field.RelationField) ISeqMiningTaskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seqMiningTaskDo) FirstOrInit() (*model.SeqMiningTask, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeqMiningTask), nil
	}
}

func (s seqMiningTaskDo) FirstOrCreate() (*model.SeqMiningTask, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeqMiningTask), nil
	}
}

func (s seqMiningTaskDo) FindByPage(offset int, limit int) (result []*model.SeqMiningTask, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seqMiningTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seqMiningTaskDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seqMiningTaskDo) Delete(models ...*model.SeqMiningTask) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seqMiningTaskDo) withDO(do gen.Dao) *seqMiningTaskDo {
	s.DO = *do.(*gen.DO)
	return s
}
