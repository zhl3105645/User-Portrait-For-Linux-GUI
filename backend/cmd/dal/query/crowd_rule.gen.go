// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newCrowdRule(db *gorm.DB, opts ...gen.DOOption) crowdRule {
	_crowdRule := crowdRule{}

	_crowdRule.crowdRuleDo.UseDB(db, opts...)
	_crowdRule.crowdRuleDo.UseModel(&model.CrowdRule{})

	tableName := _crowdRule.crowdRuleDo.TableName()
	_crowdRule.ALL = field.NewAsterisk(tableName)
	_crowdRule.CrowdRuleID = field.NewInt64(tableName, "crowd_rule_id")
	_crowdRule.LabelID = field.NewInt64(tableName, "label_id")
	_crowdRule.LabelData = field.NewString(tableName, "label_data")
	_crowdRule.DivideAction = field.NewInt64(tableName, "divide_action")

	_crowdRule.fillFieldMap()

	return _crowdRule
}

type crowdRule struct {
	crowdRuleDo crowdRuleDo

	ALL          field.Asterisk
	CrowdRuleID  field.Int64  // 人群规则ID
	LabelID      field.Int64  // 关联的标签ID
	LabelData    field.String // 关联的标签值
	DivideAction field.Int64  // 划分操作

	fieldMap map[string]field.Expr
}

func (c crowdRule) Table(newTableName string) *crowdRule {
	c.crowdRuleDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crowdRule) As(alias string) *crowdRule {
	c.crowdRuleDo.DO = *(c.crowdRuleDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crowdRule) updateTableName(table string) *crowdRule {
	c.ALL = field.NewAsterisk(table)
	c.CrowdRuleID = field.NewInt64(table, "crowd_rule_id")
	c.LabelID = field.NewInt64(table, "label_id")
	c.LabelData = field.NewString(table, "label_data")
	c.DivideAction = field.NewInt64(table, "divide_action")

	c.fillFieldMap()

	return c
}

func (c *crowdRule) WithContext(ctx context.Context) ICrowdRuleDo {
	return c.crowdRuleDo.WithContext(ctx)
}

func (c crowdRule) TableName() string { return c.crowdRuleDo.TableName() }

func (c crowdRule) Alias() string { return c.crowdRuleDo.Alias() }

func (c *crowdRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crowdRule) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["crowd_rule_id"] = c.CrowdRuleID
	c.fieldMap["label_id"] = c.LabelID
	c.fieldMap["label_data"] = c.LabelData
	c.fieldMap["divide_action"] = c.DivideAction
}

func (c crowdRule) clone(db *gorm.DB) crowdRule {
	c.crowdRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crowdRule) replaceDB(db *gorm.DB) crowdRule {
	c.crowdRuleDo.ReplaceDB(db)
	return c
}

type crowdRuleDo struct{ gen.DO }

type ICrowdRuleDo interface {
	gen.SubQuery
	Debug() ICrowdRuleDo
	WithContext(ctx context.Context) ICrowdRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrowdRuleDo
	WriteDB() ICrowdRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrowdRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrowdRuleDo
	Not(conds ...gen.Condition) ICrowdRuleDo
	Or(conds ...gen.Condition) ICrowdRuleDo
	Select(conds ...field.Expr) ICrowdRuleDo
	Where(conds ...gen.Condition) ICrowdRuleDo
	Order(conds ...field.Expr) ICrowdRuleDo
	Distinct(cols ...field.Expr) ICrowdRuleDo
	Omit(cols ...field.Expr) ICrowdRuleDo
	Join(table schema.Tabler, on ...field.Expr) ICrowdRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrowdRuleDo
	Group(cols ...field.Expr) ICrowdRuleDo
	Having(conds ...gen.Condition) ICrowdRuleDo
	Limit(limit int) ICrowdRuleDo
	Offset(offset int) ICrowdRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdRuleDo
	Unscoped() ICrowdRuleDo
	Create(values ...*model.CrowdRule) error
	CreateInBatches(values []*model.CrowdRule, batchSize int) error
	Save(values ...*model.CrowdRule) error
	First() (*model.CrowdRule, error)
	Take() (*model.CrowdRule, error)
	Last() (*model.CrowdRule, error)
	Find() ([]*model.CrowdRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdRule, err error)
	FindInBatches(result *[]*model.CrowdRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrowdRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrowdRuleDo
	Assign(attrs ...field.AssignExpr) ICrowdRuleDo
	Joins(fields ...field.RelationField) ICrowdRuleDo
	Preload(fields ...field.RelationField) ICrowdRuleDo
	FirstOrInit() (*model.CrowdRule, error)
	FirstOrCreate() (*model.CrowdRule, error)
	FindByPage(offset int, limit int) (result []*model.CrowdRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrowdRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crowdRuleDo) Debug() ICrowdRuleDo {
	return c.withDO(c.DO.Debug())
}

func (c crowdRuleDo) WithContext(ctx context.Context) ICrowdRuleDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crowdRuleDo) ReadDB() ICrowdRuleDo {
	return c.Clauses(dbresolver.Read)
}

func (c crowdRuleDo) WriteDB() ICrowdRuleDo {
	return c.Clauses(dbresolver.Write)
}

func (c crowdRuleDo) Session(config *gorm.Session) ICrowdRuleDo {
	return c.withDO(c.DO.Session(config))
}

func (c crowdRuleDo) Clauses(conds ...clause.Expression) ICrowdRuleDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crowdRuleDo) Returning(value interface{}, columns ...string) ICrowdRuleDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crowdRuleDo) Not(conds ...gen.Condition) ICrowdRuleDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crowdRuleDo) Or(conds ...gen.Condition) ICrowdRuleDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crowdRuleDo) Select(conds ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crowdRuleDo) Where(conds ...gen.Condition) ICrowdRuleDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crowdRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICrowdRuleDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c crowdRuleDo) Order(conds ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crowdRuleDo) Distinct(cols ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crowdRuleDo) Omit(cols ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crowdRuleDo) Join(table schema.Tabler, on ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crowdRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crowdRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crowdRuleDo) Group(cols ...field.Expr) ICrowdRuleDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crowdRuleDo) Having(conds ...gen.Condition) ICrowdRuleDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crowdRuleDo) Limit(limit int) ICrowdRuleDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crowdRuleDo) Offset(offset int) ICrowdRuleDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crowdRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdRuleDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crowdRuleDo) Unscoped() ICrowdRuleDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crowdRuleDo) Create(values ...*model.CrowdRule) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crowdRuleDo) CreateInBatches(values []*model.CrowdRule, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crowdRuleDo) Save(values ...*model.CrowdRule) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crowdRuleDo) First() (*model.CrowdRule, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRule), nil
	}
}

func (c crowdRuleDo) Take() (*model.CrowdRule, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRule), nil
	}
}

func (c crowdRuleDo) Last() (*model.CrowdRule, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRule), nil
	}
}

func (c crowdRuleDo) Find() ([]*model.CrowdRule, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrowdRule), err
}

func (c crowdRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdRule, err error) {
	buf := make([]*model.CrowdRule, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crowdRuleDo) FindInBatches(result *[]*model.CrowdRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crowdRuleDo) Attrs(attrs ...field.AssignExpr) ICrowdRuleDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crowdRuleDo) Assign(attrs ...field.AssignExpr) ICrowdRuleDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crowdRuleDo) Joins(fields ...field.RelationField) ICrowdRuleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crowdRuleDo) Preload(fields ...field.RelationField) ICrowdRuleDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crowdRuleDo) FirstOrInit() (*model.CrowdRule, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRule), nil
	}
}

func (c crowdRuleDo) FirstOrCreate() (*model.CrowdRule, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdRule), nil
	}
}

func (c crowdRuleDo) FindByPage(offset int, limit int) (result []*model.CrowdRule, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crowdRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crowdRuleDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crowdRuleDo) Delete(models ...*model.CrowdRule) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crowdRuleDo) withDO(do gen.Dao) *crowdRuleDo {
	c.DO = *do.(*gen.DO)
	return c
}
