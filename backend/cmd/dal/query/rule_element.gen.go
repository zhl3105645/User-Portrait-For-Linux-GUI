// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newRuleElement(db *gorm.DB, opts ...gen.DOOption) ruleElement {
	_ruleElement := ruleElement{}

	_ruleElement.ruleElementDo.UseDB(db, opts...)
	_ruleElement.ruleElementDo.UseModel(&model.RuleElement{})

	tableName := _ruleElement.ruleElementDo.TableName()
	_ruleElement.ALL = field.NewAsterisk(tableName)
	_ruleElement.RuleElementID = field.NewInt64(tableName, "rule_element_id")
	_ruleElement.RuleElementValue = field.NewString(tableName, "rule_element_value")
	_ruleElement.RuleID = field.NewInt64(tableName, "rule_id")

	_ruleElement.fillFieldMap()

	return _ruleElement
}

type ruleElement struct {
	ruleElementDo ruleElementDo

	ALL              field.Asterisk
	RuleElementID    field.Int64  // 规则元素ID
	RuleElementValue field.String // 规则元素值
	RuleID           field.Int64  // 规则ID

	fieldMap map[string]field.Expr
}

func (r ruleElement) Table(newTableName string) *ruleElement {
	r.ruleElementDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r ruleElement) As(alias string) *ruleElement {
	r.ruleElementDo.DO = *(r.ruleElementDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *ruleElement) updateTableName(table string) *ruleElement {
	r.ALL = field.NewAsterisk(table)
	r.RuleElementID = field.NewInt64(table, "rule_element_id")
	r.RuleElementValue = field.NewString(table, "rule_element_value")
	r.RuleID = field.NewInt64(table, "rule_id")

	r.fillFieldMap()

	return r
}

func (r *ruleElement) WithContext(ctx context.Context) IRuleElementDo {
	return r.ruleElementDo.WithContext(ctx)
}

func (r ruleElement) TableName() string { return r.ruleElementDo.TableName() }

func (r ruleElement) Alias() string { return r.ruleElementDo.Alias() }

func (r *ruleElement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *ruleElement) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["rule_element_id"] = r.RuleElementID
	r.fieldMap["rule_element_value"] = r.RuleElementValue
	r.fieldMap["rule_id"] = r.RuleID
}

func (r ruleElement) clone(db *gorm.DB) ruleElement {
	r.ruleElementDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r ruleElement) replaceDB(db *gorm.DB) ruleElement {
	r.ruleElementDo.ReplaceDB(db)
	return r
}

type ruleElementDo struct{ gen.DO }

type IRuleElementDo interface {
	gen.SubQuery
	Debug() IRuleElementDo
	WithContext(ctx context.Context) IRuleElementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRuleElementDo
	WriteDB() IRuleElementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRuleElementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRuleElementDo
	Not(conds ...gen.Condition) IRuleElementDo
	Or(conds ...gen.Condition) IRuleElementDo
	Select(conds ...field.Expr) IRuleElementDo
	Where(conds ...gen.Condition) IRuleElementDo
	Order(conds ...field.Expr) IRuleElementDo
	Distinct(cols ...field.Expr) IRuleElementDo
	Omit(cols ...field.Expr) IRuleElementDo
	Join(table schema.Tabler, on ...field.Expr) IRuleElementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRuleElementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRuleElementDo
	Group(cols ...field.Expr) IRuleElementDo
	Having(conds ...gen.Condition) IRuleElementDo
	Limit(limit int) IRuleElementDo
	Offset(offset int) IRuleElementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRuleElementDo
	Unscoped() IRuleElementDo
	Create(values ...*model.RuleElement) error
	CreateInBatches(values []*model.RuleElement, batchSize int) error
	Save(values ...*model.RuleElement) error
	First() (*model.RuleElement, error)
	Take() (*model.RuleElement, error)
	Last() (*model.RuleElement, error)
	Find() ([]*model.RuleElement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RuleElement, err error)
	FindInBatches(result *[]*model.RuleElement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RuleElement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRuleElementDo
	Assign(attrs ...field.AssignExpr) IRuleElementDo
	Joins(fields ...field.RelationField) IRuleElementDo
	Preload(fields ...field.RelationField) IRuleElementDo
	FirstOrInit() (*model.RuleElement, error)
	FirstOrCreate() (*model.RuleElement, error)
	FindByPage(offset int, limit int) (result []*model.RuleElement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRuleElementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r ruleElementDo) Debug() IRuleElementDo {
	return r.withDO(r.DO.Debug())
}

func (r ruleElementDo) WithContext(ctx context.Context) IRuleElementDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r ruleElementDo) ReadDB() IRuleElementDo {
	return r.Clauses(dbresolver.Read)
}

func (r ruleElementDo) WriteDB() IRuleElementDo {
	return r.Clauses(dbresolver.Write)
}

func (r ruleElementDo) Session(config *gorm.Session) IRuleElementDo {
	return r.withDO(r.DO.Session(config))
}

func (r ruleElementDo) Clauses(conds ...clause.Expression) IRuleElementDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r ruleElementDo) Returning(value interface{}, columns ...string) IRuleElementDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r ruleElementDo) Not(conds ...gen.Condition) IRuleElementDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r ruleElementDo) Or(conds ...gen.Condition) IRuleElementDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r ruleElementDo) Select(conds ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r ruleElementDo) Where(conds ...gen.Condition) IRuleElementDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r ruleElementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRuleElementDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r ruleElementDo) Order(conds ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r ruleElementDo) Distinct(cols ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r ruleElementDo) Omit(cols ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r ruleElementDo) Join(table schema.Tabler, on ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r ruleElementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r ruleElementDo) RightJoin(table schema.Tabler, on ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r ruleElementDo) Group(cols ...field.Expr) IRuleElementDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r ruleElementDo) Having(conds ...gen.Condition) IRuleElementDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r ruleElementDo) Limit(limit int) IRuleElementDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r ruleElementDo) Offset(offset int) IRuleElementDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r ruleElementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRuleElementDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r ruleElementDo) Unscoped() IRuleElementDo {
	return r.withDO(r.DO.Unscoped())
}

func (r ruleElementDo) Create(values ...*model.RuleElement) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r ruleElementDo) CreateInBatches(values []*model.RuleElement, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r ruleElementDo) Save(values ...*model.RuleElement) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r ruleElementDo) First() (*model.RuleElement, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleElement), nil
	}
}

func (r ruleElementDo) Take() (*model.RuleElement, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleElement), nil
	}
}

func (r ruleElementDo) Last() (*model.RuleElement, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleElement), nil
	}
}

func (r ruleElementDo) Find() ([]*model.RuleElement, error) {
	result, err := r.DO.Find()
	return result.([]*model.RuleElement), err
}

func (r ruleElementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RuleElement, err error) {
	buf := make([]*model.RuleElement, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r ruleElementDo) FindInBatches(result *[]*model.RuleElement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r ruleElementDo) Attrs(attrs ...field.AssignExpr) IRuleElementDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r ruleElementDo) Assign(attrs ...field.AssignExpr) IRuleElementDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r ruleElementDo) Joins(fields ...field.RelationField) IRuleElementDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r ruleElementDo) Preload(fields ...field.RelationField) IRuleElementDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r ruleElementDo) FirstOrInit() (*model.RuleElement, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleElement), nil
	}
}

func (r ruleElementDo) FirstOrCreate() (*model.RuleElement, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RuleElement), nil
	}
}

func (r ruleElementDo) FindByPage(offset int, limit int) (result []*model.RuleElement, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r ruleElementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r ruleElementDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r ruleElementDo) Delete(models ...*model.RuleElement) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *ruleElementDo) withDO(do gen.Dao) *ruleElementDo {
	r.DO = *do.(*gen.DO)
	return r
}
