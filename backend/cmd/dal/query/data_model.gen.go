// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"backend/cmd/dal/model"
)

func newDataModel(db *gorm.DB, opts ...gen.DOOption) dataModel {
	_dataModel := dataModel{}

	_dataModel.dataModelDo.UseDB(db, opts...)
	_dataModel.dataModelDo.UseModel(&model.DataModel{})

	tableName := _dataModel.dataModelDo.TableName()
	_dataModel.ALL = field.NewAsterisk(tableName)
	_dataModel.ModelID = field.NewInt64(tableName, "model_id")
	_dataModel.ModelType = field.NewInt64(tableName, "model_type")
	_dataModel.SourceID = field.NewInt64(tableName, "source_id")
	_dataModel.MlParam = field.NewString(tableName, "ml_param")
	_dataModel.CalculateType = field.NewInt64(tableName, "calculate_type")
	_dataModel.AppID = field.NewInt64(tableName, "app_id")
	_dataModel.ModelName = field.NewString(tableName, "model_name")
	_dataModel.DataType = field.NewInt64(tableName, "data_type")

	_dataModel.fillFieldMap()

	return _dataModel
}

type dataModel struct {
	dataModelDo dataModelDo

	ALL           field.Asterisk
	ModelID       field.Int64  // 数据源ID
	ModelType     field.Int64  // 数据源类型
	SourceID      field.Int64  // 统计数据源ID
	MlParam       field.String // 机器学习服务参数
	CalculateType field.Int64  // 统计计算类型
	AppID         field.Int64  // 应用ID
	ModelName     field.String // 模型名
	DataType      field.Int64  // 数据类型

	fieldMap map[string]field.Expr
}

func (d dataModel) Table(newTableName string) *dataModel {
	d.dataModelDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataModel) As(alias string) *dataModel {
	d.dataModelDo.DO = *(d.dataModelDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataModel) updateTableName(table string) *dataModel {
	d.ALL = field.NewAsterisk(table)
	d.ModelID = field.NewInt64(table, "model_id")
	d.ModelType = field.NewInt64(table, "model_type")
	d.SourceID = field.NewInt64(table, "source_id")
	d.MlParam = field.NewString(table, "ml_param")
	d.CalculateType = field.NewInt64(table, "calculate_type")
	d.AppID = field.NewInt64(table, "app_id")
	d.ModelName = field.NewString(table, "model_name")
	d.DataType = field.NewInt64(table, "data_type")

	d.fillFieldMap()

	return d
}

func (d *dataModel) WithContext(ctx context.Context) IDataModelDo {
	return d.dataModelDo.WithContext(ctx)
}

func (d dataModel) TableName() string { return d.dataModelDo.TableName() }

func (d dataModel) Alias() string { return d.dataModelDo.Alias() }

func (d *dataModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataModel) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["model_id"] = d.ModelID
	d.fieldMap["model_type"] = d.ModelType
	d.fieldMap["source_id"] = d.SourceID
	d.fieldMap["ml_param"] = d.MlParam
	d.fieldMap["calculate_type"] = d.CalculateType
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["model_name"] = d.ModelName
	d.fieldMap["data_type"] = d.DataType
}

func (d dataModel) clone(db *gorm.DB) dataModel {
	d.dataModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataModel) replaceDB(db *gorm.DB) dataModel {
	d.dataModelDo.ReplaceDB(db)
	return d
}

type dataModelDo struct{ gen.DO }

type IDataModelDo interface {
	gen.SubQuery
	Debug() IDataModelDo
	WithContext(ctx context.Context) IDataModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataModelDo
	WriteDB() IDataModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataModelDo
	Not(conds ...gen.Condition) IDataModelDo
	Or(conds ...gen.Condition) IDataModelDo
	Select(conds ...field.Expr) IDataModelDo
	Where(conds ...gen.Condition) IDataModelDo
	Order(conds ...field.Expr) IDataModelDo
	Distinct(cols ...field.Expr) IDataModelDo
	Omit(cols ...field.Expr) IDataModelDo
	Join(table schema.Tabler, on ...field.Expr) IDataModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataModelDo
	Group(cols ...field.Expr) IDataModelDo
	Having(conds ...gen.Condition) IDataModelDo
	Limit(limit int) IDataModelDo
	Offset(offset int) IDataModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataModelDo
	Unscoped() IDataModelDo
	Create(values ...*model.DataModel) error
	CreateInBatches(values []*model.DataModel, batchSize int) error
	Save(values ...*model.DataModel) error
	First() (*model.DataModel, error)
	Take() (*model.DataModel, error)
	Last() (*model.DataModel, error)
	Find() ([]*model.DataModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataModel, err error)
	FindInBatches(result *[]*model.DataModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataModelDo
	Assign(attrs ...field.AssignExpr) IDataModelDo
	Joins(fields ...field.RelationField) IDataModelDo
	Preload(fields ...field.RelationField) IDataModelDo
	FirstOrInit() (*model.DataModel, error)
	FirstOrCreate() (*model.DataModel, error)
	FindByPage(offset int, limit int) (result []*model.DataModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataModelDo) Debug() IDataModelDo {
	return d.withDO(d.DO.Debug())
}

func (d dataModelDo) WithContext(ctx context.Context) IDataModelDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataModelDo) ReadDB() IDataModelDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataModelDo) WriteDB() IDataModelDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataModelDo) Session(config *gorm.Session) IDataModelDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataModelDo) Clauses(conds ...clause.Expression) IDataModelDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataModelDo) Returning(value interface{}, columns ...string) IDataModelDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataModelDo) Not(conds ...gen.Condition) IDataModelDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataModelDo) Or(conds ...gen.Condition) IDataModelDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataModelDo) Select(conds ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataModelDo) Where(conds ...gen.Condition) IDataModelDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDataModelDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dataModelDo) Order(conds ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataModelDo) Distinct(cols ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataModelDo) Omit(cols ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataModelDo) Join(table schema.Tabler, on ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataModelDo) Group(cols ...field.Expr) IDataModelDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataModelDo) Having(conds ...gen.Condition) IDataModelDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataModelDo) Limit(limit int) IDataModelDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataModelDo) Offset(offset int) IDataModelDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataModelDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataModelDo) Unscoped() IDataModelDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataModelDo) Create(values ...*model.DataModel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataModelDo) CreateInBatches(values []*model.DataModel, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataModelDo) Save(values ...*model.DataModel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataModelDo) First() (*model.DataModel, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataModel), nil
	}
}

func (d dataModelDo) Take() (*model.DataModel, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataModel), nil
	}
}

func (d dataModelDo) Last() (*model.DataModel, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataModel), nil
	}
}

func (d dataModelDo) Find() ([]*model.DataModel, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataModel), err
}

func (d dataModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataModel, err error) {
	buf := make([]*model.DataModel, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataModelDo) FindInBatches(result *[]*model.DataModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataModelDo) Attrs(attrs ...field.AssignExpr) IDataModelDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataModelDo) Assign(attrs ...field.AssignExpr) IDataModelDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataModelDo) Joins(fields ...field.RelationField) IDataModelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataModelDo) Preload(fields ...field.RelationField) IDataModelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataModelDo) FirstOrInit() (*model.DataModel, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataModel), nil
	}
}

func (d dataModelDo) FirstOrCreate() (*model.DataModel, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataModel), nil
	}
}

func (d dataModelDo) FindByPage(offset int, limit int) (result []*model.DataModel, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataModelDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataModelDo) Delete(models ...*model.DataModel) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataModelDo) withDO(do gen.Dao) *dataModelDo {
	d.DO = *do.(*gen.DO)
	return d
}
